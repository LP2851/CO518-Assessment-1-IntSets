#BlueJ class context
comment0.target=TreeSet
comment0.text=\r\n\ This\ is\ the\ TreeSet\ class\ that\ handles\ multiple\ ints\ in\ a\ set.\r\n\r\n\ @author\ Lucas\ Phillips\r\n\ @version\ 15/10/2020\r\n
comment1.params=left\ right
comment1.target=TreeSet(IntSet,\ IntSet)
comment1.text=\r\n\ Constructor\ for\ the\ TreeSet\ class.\r\n\ @param\ left\ \ IntSet\ going\ into\ the\ left\ side\ of\ the\ tree.\r\n\ @param\ right\ IntSet\ going\ into\ the\ right\ side\ of\ the\ tree.\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ Returns\ a\ string\ representing\ the\ TreeSet\ with\ all\ of\ the\ values\ it\ represents\ split\ up\ with\ commas\ and\ surrounded\ by\r\n\ curly\ brackets.\r\n\ E.g.\ "{1,2,3,4,5,6,7,8,9}"\r\n\ @return\ A\ string\ representing\ the\ TreeSet\ with\ all\ of\ the\ values\ it\ represents.\r\n
comment2.params=
comment2.target=TreeSet()
comment2.text=\r\n\ Constructor\ for\ the\ TreeSet\ class\ creating\ an\ empty\ tree.\r\n
comment3.params=x
comment3.target=boolean\ isEven(int)
comment3.text=\r\n\ Returns\ if\ the\ integer\ x\ is\ an\ even\ number.\r\n\ @param\ x\ Integer\ to\ be\ checked\ to\ see\ if\ it\ is\ even.\ \r\n\ @return\ Boolean\ value\ depending\ on\ if\ x\ is\ even\ or\ odd.\r\n
comment4.params=x
comment4.target=IntSet\ add(int)
comment4.text=\r\n\ Adds\ an\ integer\ to\ the\ TreeSet\ and\ returns\ the\ new\ TreeSet.\r\n\ If\ the\ integer\ is\ already\ in\ the\ tree\ set\ then\ it\ is\ not\ added\ and\ the\ same\ tree\ is\ returned.\r\n\ @param\ x\ The\ integer\ to\ be\ added\ to\ the\ TreeSet.\r\n\ @return\ A\ new\ TreeSet\ containing\ x.\r\n
comment5.params=x
comment5.target=boolean\ contains(int)
comment5.text=\r\n\ Returns\ a\ boolean\ value\ representing\ if\ the\ passed\ value\ is\ in\ the\ TreeSet.\r\n\ @param\ x\ The\ value\ being\ searched\ for\ in\ the\ tree.\r\n\ @return\ A\ boolean\ value\ representing\ if\ the\ passed\ value\ is\ in\ the\ TreeSet.\r\n
comment6.params=i
comment6.target=IntSet\ getTreeSide(int)
comment6.text=\r\n\ Returns\ a\ side\ of\ the\ tree\ set\ it\ is\ called\ on.\ This\ is\ only\ used\ in\ union\ on\ the\ passed\ other\ set.\r\n\ @param\ i\ Integer\ containing\ 0\ or\ 1\ representing\ left\ or\ right\ side\ of\ the\ tree.\r\n\ @return\ The\ side\ of\ the\ tree\ requested\ (can\ be\ EmptySet,\ Singleton\ or\ TreeSet).\r\n
comment7.params=other
comment7.target=IntSet\ union(IntSet)
comment7.text=\r\n\ Returns\ a\ new\ set\ containing\ all\ of\ the\ elements\ from\ this\ set\ and\ from\ the\ passed\ set\ (no\ duplicates\ as\ this\ is\ a\ set).\r\n\ @param\ other\ The\ set\ to\ be\ unioned\ to\ the\ set\ this\ has\ been\ called\ on.\ \r\n\ @return\ A\ new\ set\ containing\ all\ of\ the\ elements\ from\ this\ set\ and\ from\ the\ passed\ set.\r\n
comment8.params=strings\ leftOrRight
comment8.target=int[]\ getIntsFromStrings(java.lang.String[],\ int)
comment8.text=\r\n\ Extracts\ all\ of\ the\ integers\ from\ the\ strings\ in\ the\ string\ array\ that\ it\ is\ passed\ and\ upscales\ them\ to\ new\ values.\r\n\ @param\ strings\ String[]\ containing\ all\ of\ the\ integers\ to\ be\ parsed\ to\ ints.\ \r\n\ @param\ leftOrRight\ Either\ 0\ or\ 1\ depending\ on\ if\ the\ information\ is\ coming\ from\ the\ left\ or\ the\ right\ of\ the\ tree.\r\n\ @return\ An\ int[]\ containing\ all\ of\ the\ numbers\ (upscaled).\r\n
comment9.params=left\ right
comment9.target=java.lang.String\ createIntString(int[],\ int[])
comment9.text=\r\n\ Creates\ a\ string\ containing\ all\ of\ the\ numbers\ from\ the\ two\ arrays\ it\ is\ passed.\r\n\ E.g.\ Returns\ "2,4,6,8,10,100,101,1,5,7,9"\r\n\ @param\ left\ An\ int[]\ for\ all\ of\ the\ numbers\ taken\ from\ the\ left\ side\ of\ the\ tree\ -\ side\ doesnt\ really\ matter.\r\n\ @param\ right\ An\ int[]\ for\ all\ of\ the\ numbers\ taken\ from\ the\ right\ side\ of\ the\ tree\ -\ side\ doesnt\ really\ matter.\r\n\ @return\ A\ string\ of\ integers\ separated\ by\ commas\ with\ all\ of\ the\ numbers\ from\ both\ passed\ arrays.\ \r\n
numComments=11
